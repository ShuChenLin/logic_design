`timescale 1ns/1ps

module Multiplier_4bit(a, b, p);
input [4-1:0] a, b;
output [8-1:0] p;

wire [3:0] A [3:0];
wire [3:0] s [3:0];
wire c1,c2;
A_and_4_bit_B a0(a[0],b,A[0]);
A_and_4_bit_B a1(a[1],b,A[1]);
A_and_4_bit_B a2(a[2],b,A[2]);
A_and_4_bit_B a3(a[3],b,A[3]);
NAND_ASSIGN NAS(p[0],A[0][0]);

RCA_4bit r0(A[1],{1'b0,A[0][3:1]},c1,s[0]);
NAND_ASSIGN NAS1(p[1],s[0][0]);

RCA_4bit r1(A[2],{c1,s[0][3:1]},c2,s[1]);
NAND_ASSIGN NAS2(p[2],s[1][0]);
RCA_4bit r2(A[3],{c2,s[1][3:1]},p[7],p[6:3]);



endmodule

module A_and_4_bit_B(a,b,c);
input a;
input [3:0] b;
output [3:0] c;
NAND_AND n0(c[0],a,b[0]);
NAND_AND n1(c[1],a,b[1]);
NAND_AND n2(c[2],a,b[2]);
NAND_AND n3(c[3],a,b[3]);
endmodule
module RCA_4bit(a, b,cout, sum);
input [4-1:0] a, b;
output cout;
output [4-1:0] sum;
wire c3,c1,c2;
Full_Adder fa0(a[0],b[0],1'b0,c1,sum[0]);
Full_Adder fa1(a[1],b[1],c1,c2,sum[1]);
Full_Adder fa2(a[2],b[2],c2,c3,sum[2]);
Full_Adder fa3(a[3],b[3],c3,cout,sum[3]);
    
endmodule

module Full_Adder (a, b, cin, cout, sum);
input a, b, cin;
output cout, sum;
wire c,d,f;
NAND_XOR NX(c,a,b);
NAND_XOR NX1(sum,c,cin);
NAND_AND NA(d,a,b);
NAND_AND NA1(f,c,cin);
NAND_OR NO(cout,d,f);
endmodule

module NAND_XOR(y,a,b);
input a,b;
output y;
wire c,d,e;
nand n0(c,a,b);
nand n1(d,a,c);
nand n2(e,c,b);
nand n3(y,d,e);
 endmodule
module NAND_OR(y,a,b);
input a,b;
output y;
wire c,d;
nand na1(c,a,a);
nand na2(d,b,b);
nand na3(y,c,d);
endmodule

module NAND_AND(y,a,b);
input a,b;
output y;
wire c,d;
nand na1(c,a,b);
nand na2(y,c,c);
endmodule

module NAND_ASSIGN(y,a);
input a;
output y;
wire na;
NAND_NOT NN(na,a);
NAND_NOT NN1(y,na);
endmodule

module NAND_NOT(y,a);
input a;
output y;
nand na1(y,a,a);
endmodule
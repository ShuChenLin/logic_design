$date
    Oct 20, 2022  21:45:30
$end
$version
    TOOL:	ncsim	15.20-s039
$end
$timescale
    1 ps
$end

$scope module or_8bit $end
$var wire      1 !    a [7] $end
$var wire      1 !    a [6] $end
$var wire      1 !    a [5] $end
$var wire      1 !    a [4] $end
$var wire      1 !    a [3] $end
$var wire      1 !    a [2] $end
$var wire      1 !    a [1] $end
$var wire      1 !    a [0] $end
$var wire      1 !    b [7] $end
$var wire      1 !    b [6] $end
$var wire      1 !    b [5] $end
$var wire      1 !    b [4] $end
$var wire      1 !    b [3] $end
$var wire      1 !    b [2] $end
$var wire      1 !    b [1] $end
$var wire      1 !    b [0] $end
$var wire      1 !    c [7] $end
$var wire      1 !    c [6] $end
$var wire      1 !    c [5] $end
$var wire      1 !    c [4] $end
$var wire      1 !    c [3] $end
$var wire      1 !    c [2] $end
$var wire      1 !    c [1] $end
$var wire      1 !    c [0] $end
$var wire      1 !    d [7] $end
$var wire      1 !    d [6] $end
$var wire      1 !    d [5] $end
$var wire      1 !    d [4] $end
$var wire      1 !    d [3] $end
$var wire      1 !    d [2] $end
$var wire      1 !    d [1] $end
$var wire      1 !    d [0] $end
$var wire      1 "    out [7] $end
$var wire      1 "    out [6] $end
$var wire      1 "    out [5] $end
$var wire      1 "    out [4] $end
$var wire      1 "    out [3] $end
$var wire      1 "    out [2] $end
$var wire      1 "    out [1] $end
$var wire      1 "    out [0] $end

$scope module a0 $end
$var wire      1 !    a  $end
$var wire      1 !    b  $end
$var wire      1 !    c  $end
$var wire      1 !    d  $end
$var wire      1 "    out  $end
$var wire      1 #    tmp1  $end
$var wire      1 $    tmp2  $end
$upscope $end


$scope module a1 $end
$var wire      1 !    a  $end
$var wire      1 !    b  $end
$var wire      1 !    c  $end
$var wire      1 !    d  $end
$var wire      1 "    out  $end
$var wire      1 #    tmp1  $end
$var wire      1 $    tmp2  $end
$upscope $end


$scope module a2 $end
$var wire      1 !    a  $end
$var wire      1 !    b  $end
$var wire      1 !    c  $end
$var wire      1 !    d  $end
$var wire      1 "    out  $end
$var wire      1 #    tmp1  $end
$var wire      1 $    tmp2  $end
$upscope $end


$scope module a3 $end
$var wire      1 !    a  $end
$var wire      1 !    b  $end
$var wire      1 !    c  $end
$var wire      1 !    d  $end
$var wire      1 "    out  $end
$var wire      1 #    tmp1  $end
$var wire      1 $    tmp2  $end
$upscope $end


$scope module a4 $end
$var wire      1 !    a  $end
$var wire      1 !    b  $end
$var wire      1 !    c  $end
$var wire      1 !    d  $end
$var wire      1 "    out  $end
$var wire      1 #    tmp1  $end
$var wire      1 $    tmp2  $end
$upscope $end


$scope module a5 $end
$var wire      1 !    a  $end
$var wire      1 !    b  $end
$var wire      1 !    c  $end
$var wire      1 !    d  $end
$var wire      1 "    out  $end
$var wire      1 #    tmp1  $end
$var wire      1 $    tmp2  $end
$upscope $end


$scope module a6 $end
$var wire      1 !    a  $end
$var wire      1 !    b  $end
$var wire      1 !    c  $end
$var wire      1 !    d  $end
$var wire      1 "    out  $end
$var wire      1 #    tmp1  $end
$var wire      1 $    tmp2  $end
$upscope $end


$scope module a7 $end
$var wire      1 !    a  $end
$var wire      1 !    b  $end
$var wire      1 !    c  $end
$var wire      1 !    d  $end
$var wire      1 "    out  $end
$var wire      1 #    tmp1  $end
$var wire      1 $    tmp2  $end
$upscope $end

$upscope $end


$scope module Round_Robin_FIFO_Arbiter_t $end
$var reg       1 %    clk  $end
$var reg       1 &    rst_n  $end
$var reg       4 '    wen [3:0] $end
$var reg       8 (    a [7:0] $end
$var reg       8 )    b [7:0] $end
$var reg       8 *    c [7:0] $end
$var reg       8 +    d [7:0] $end
$var wire      8 ,    dout [7:0] $end
$var wire      1 -    valid  $end
$var wire      8 .    not_found [7:0] $end
$var parameter 32 /    cyc  $end

$scope module rrfa $end
$var wire      1 0    clk  $end
$var wire      1 1    rst_n  $end
$var wire      1 2    wen [3] $end
$var wire      1 3    wen [2] $end
$var wire      1 4    wen [1] $end
$var wire      1 5    wen [0] $end
$var wire      8 6    a [7:0] $end
$var wire      8 7    b [7:0] $end
$var wire      8 8    c [7:0] $end
$var wire      8 9    d [7:0] $end
$var reg       8 :    dout [7:0] $end
$var reg       1 ;    valid  $end
$var wire      1 <    era  $end
$var wire      1 =    erb  $end
$var wire      1 >    erc  $end
$var wire      1 ?    erd  $end
$var wire      2 @    next_counter [1:0] $end
$var wire      8 A    Aout [7:0] $end
$var wire      8 B    Bout [7:0] $end
$var wire      8 C    Cout [7:0] $end
$var wire      8 D    Dout [7:0] $end
$var reg       1 E    ra  $end
$var reg       1 F    rb  $end
$var reg       1 G    rc  $end
$var reg       1 H    rd  $end
$var reg       1 I    tmp_valid  $end
$var reg       3 J    counter [2:0] $end

$scope module fa $end
$var wire      1 0    clk  $end
$var wire      1 1    rst_n  $end
$var wire      1 5    wen  $end
$var wire      1 K    ren  $end
$var wire      8 6    din [7:0] $end
$var reg       8 L    dout [7:0] $end
$var reg       1 M    error  $end
$var reg       4 N    head [3:0] $end
$var reg       4 O    tail [3:0] $end
$var reg       4 P    next_head [3:0] $end
$var reg       4 Q    next_tail [3:0] $end
$upscope $end


$scope module fb $end
$var wire      1 0    clk  $end
$var wire      1 1    rst_n  $end
$var wire      1 4    wen  $end
$var wire      1 R    ren  $end
$var wire      8 7    din [7:0] $end
$var reg       8 S    dout [7:0] $end
$var reg       1 T    error  $end
$var reg       4 U    head [3:0] $end
$var reg       4 V    tail [3:0] $end
$var reg       4 W    next_head [3:0] $end
$var reg       4 X    next_tail [3:0] $end
$upscope $end


$scope module fc $end
$var wire      1 0    clk  $end
$var wire      1 1    rst_n  $end
$var wire      1 3    wen  $end
$var wire      1 Y    ren  $end
$var wire      8 8    din [7:0] $end
$var reg       8 Z    dout [7:0] $end
$var reg       1 [    error  $end
$var reg       4 \    head [3:0] $end
$var reg       4 ]    tail [3:0] $end
$var reg       4 ^    next_head [3:0] $end
$var reg       4 _    next_tail [3:0] $end
$upscope $end


$scope module fd $end
$var wire      1 0    clk  $end
$var wire      1 1    rst_n  $end
$var wire      1 2    wen  $end
$var wire      1 `    ren  $end
$var wire      8 9    din [7:0] $end
$var reg       8 a    dout [7:0] $end
$var reg       1 b    error  $end
$var reg       4 c    head [3:0] $end
$var reg       4 d    tail [3:0] $end
$var reg       4 e    next_head [3:0] $end
$var reg       4 f    next_tail [3:0] $end
$upscope $end

$upscope $end

$upscope $end

$enddefinitions $end
$dumpvars
b1010 /
z!
x"
x#
x$
0%
0&
b0 '
b0 (
b0 )
b0 *
b0 +
b0 ,
0-
bz .
00
01
02
03
04
05
b0 6
b0 7
b0 8
b0 9
b0 :
0;
x<
x=
x>
x?
b1 @
bx A
bx B
bx C
bx D
1E
0F
0G
0H
0I
b0 J
1K
bx L
xM
bx N
bx O
bx P
bx Q
0R
bx S
xT
bx U
bx V
bx W
bx X
0Y
bx Z
x[
bx \
bx ]
bx ^
bx _
0`
bx a
xb
bx c
bx d
bx e
bx f
$end
#5000
1%
10
b0 c
b0 d
b0 a
0b
b0 \
b0 ]
b0 Z
0[
b0 U
b0 V
b0 S
0T
b0 N
b0 O
b0 L
0M
b1 e
b1 f
b1 ^
b1 _
b1 W
b1 X
b1 P
b1 Q
0<
b0 A
0=
b0 B
0>
b0 C
0?
b0 D
#10000
0%
1&
b1111 '
b1010111 (
b111000 )
b1001 *
b1100 +
b1100 9
b1001 8
b111000 7
b1010111 6
12
13
14
15
11
00
0E
0K
#15000
1%
10
bx a
b1 d
bx Z
b1 ]
bx S
b1 V
bx L
b1 O
b1 J
b10 f
b10 _
b10 X
b10 Q
b10 @
bx A
bx B
bx C
bx D
#20000
0%
b1000 '
bz (
bz )
bz *
b1010101 +
b1010101 9
bz 8
bz 7
bz 6
03
04
05
00
1F
1R
#25000
1%
10
b10 d
b111000 S
b1 U
b10 J
1I
b11 f
b10 W
0F
1G
1;
bx :
bx ,
1-
1Y
0R
b11 @
b111000 B
b111000 :
b111000 ,
#30000
0%
b100 '
b10001011 *
bz +
bz 9
b10001011 8
02
13
00
0G
0Y
#35000
1%
10
b10 ]
bx S
b11 J
0I
b11 _
1H
0;
b0 :
b0 ,
0-
1`
b0 @
bx B
#40000
0%
b0 '
bz *
bz 8
03
00
0H
1H
#45000
1%
10
b1100 a
b1 c
b0 J
1I
b10 e
0H
1E
1;
bx :
bx ,
1-
1K
0`
b1 @
b1100 D
b1100 :
b1100 ,
#50000
0%
00
#55000
1%
10
bx a
b1010111 L
b1 N
b1 J
b10 P
0E
1F
0;
1;
bx :
bx ,
1R
0K
b10 @
b1010111 A
bx D
b1010111 :
b1010111 ,
#60000
0%
00
#65000
1%
10
1T
bx L
b10 J
0F
1G
0;
1;
bx :
bx ,
1Y
0R
b11 @
bx A
1=
0;
b0 :
b0 ,
0-
#70000
0%
b1 '
b110011 (
b110011 6
15
00
0G
1G
#75000
1%
10
b1001 Z
b1 \
0T
b10 O
b11 J
b10 ^
b11 Q
0G
1H
1;
bx :
bx ,
1-
1`
0Y
b0 @
0=
b1001 C
0;
1;
b1001 :
b1001 ,
#80000
0%
b0 '
bz (
bz 6
05
00
0H
1H
#85000
1%
10
b1010101 a
b10 c
bx Z
b0 J
b11 e
0H
1E
0;
1;
bx :
bx ,
1K
0`
b1 @
bx C
b1010101 D
b1010101 :
b1010101 ,
#90000
0%
00
#95000
1%
10
bx a
b110011 L
b10 N
b1 J
b11 P
0E
1F
0;
1;
bx :
bx ,
1R
0K
b10 @
b110011 A
bx D
b110011 :
b110011 ,
#100000
0%
b111 '
b101100 )
b10110 *
b1100011 +
b1100011 9
b10110 8
b101100 7
13
14
15
00
0F
0R
#105000
1%
10
b11 ]
b10 V
bx L
b11 O
b10 J
0I
b100 _
b11 X
b100 Q
0;
b0 :
b0 ,
0-
b11 @
bx A
#110000
0%
0&
b1111 '
b1011 (
b10110 )
b100001 *
b1011000 +
b1011000 9
b100001 8
b10110 7
b1011 6
12
01
00
#115000
1%
10
b0 c
b0 d
b0 a
b0 \
b0 ]
b0 Z
b0 U
b0 V
b0 S
b0 N
b0 O
b0 L
b0 J
b1 e
b1 f
b1 ^
b1 _
b1 W
b1 X
b1 P
b1 Q
b1 @
b0 A
b0 B
b0 C
b0 D
#120000
0%
1&
b0 '
bz (
bz )
bz *
bz +
bz 9
bz 8
bz 7
bz 6
02
03
04
05
11
00
1E
1K
#125000
1%
10
bx a
bx Z
bx S
1M
bx L
b1 J
1I
0E
1F
1;
1-
1R
0K
b10 @
bx A
1<
bx B
bx C
bx D
bx :
0;
b0 :
0-
#130000
0%
00
#135000
1%
10
1T
0M
b10 J
0F
1G
1;
bx :
bx ,
1-
1Y
0R
b11 @
0<
1=
0;
b0 :
b0 ,
0-
#140000
0%

$date
    Oct 14, 2022  23:06:32
$end
$version
    TOOL:	ncsim	15.20-s039
$end
$timescale
    1 ps
$end

$scope module or_8bit $end
$var wire      1 !    a [7] $end
$var wire      1 !    a [6] $end
$var wire      1 !    a [5] $end
$var wire      1 !    a [4] $end
$var wire      1 !    a [3] $end
$var wire      1 !    a [2] $end
$var wire      1 !    a [1] $end
$var wire      1 !    a [0] $end
$var wire      1 !    b [7] $end
$var wire      1 !    b [6] $end
$var wire      1 !    b [5] $end
$var wire      1 !    b [4] $end
$var wire      1 !    b [3] $end
$var wire      1 !    b [2] $end
$var wire      1 !    b [1] $end
$var wire      1 !    b [0] $end
$var wire      1 !    c [7] $end
$var wire      1 !    c [6] $end
$var wire      1 !    c [5] $end
$var wire      1 !    c [4] $end
$var wire      1 !    c [3] $end
$var wire      1 !    c [2] $end
$var wire      1 !    c [1] $end
$var wire      1 !    c [0] $end
$var wire      1 !    d [7] $end
$var wire      1 !    d [6] $end
$var wire      1 !    d [5] $end
$var wire      1 !    d [4] $end
$var wire      1 !    d [3] $end
$var wire      1 !    d [2] $end
$var wire      1 !    d [1] $end
$var wire      1 !    d [0] $end
$var wire      1 "    out [7] $end
$var wire      1 "    out [6] $end
$var wire      1 "    out [5] $end
$var wire      1 "    out [4] $end
$var wire      1 "    out [3] $end
$var wire      1 "    out [2] $end
$var wire      1 "    out [1] $end
$var wire      1 "    out [0] $end

$scope module a0 $end
$var wire      1 !    a  $end
$var wire      1 !    b  $end
$var wire      1 !    c  $end
$var wire      1 !    d  $end
$var wire      1 "    out  $end
$var wire      1 #    tmp1  $end
$var wire      1 $    tmp2  $end
$upscope $end


$scope module a1 $end
$var wire      1 !    a  $end
$var wire      1 !    b  $end
$var wire      1 !    c  $end
$var wire      1 !    d  $end
$var wire      1 "    out  $end
$var wire      1 #    tmp1  $end
$var wire      1 $    tmp2  $end
$upscope $end


$scope module a2 $end
$var wire      1 !    a  $end
$var wire      1 !    b  $end
$var wire      1 !    c  $end
$var wire      1 !    d  $end
$var wire      1 "    out  $end
$var wire      1 #    tmp1  $end
$var wire      1 $    tmp2  $end
$upscope $end


$scope module a3 $end
$var wire      1 !    a  $end
$var wire      1 !    b  $end
$var wire      1 !    c  $end
$var wire      1 !    d  $end
$var wire      1 "    out  $end
$var wire      1 #    tmp1  $end
$var wire      1 $    tmp2  $end
$upscope $end


$scope module a4 $end
$var wire      1 !    a  $end
$var wire      1 !    b  $end
$var wire      1 !    c  $end
$var wire      1 !    d  $end
$var wire      1 "    out  $end
$var wire      1 #    tmp1  $end
$var wire      1 $    tmp2  $end
$upscope $end


$scope module a5 $end
$var wire      1 !    a  $end
$var wire      1 !    b  $end
$var wire      1 !    c  $end
$var wire      1 !    d  $end
$var wire      1 "    out  $end
$var wire      1 #    tmp1  $end
$var wire      1 $    tmp2  $end
$upscope $end


$scope module a6 $end
$var wire      1 !    a  $end
$var wire      1 !    b  $end
$var wire      1 !    c  $end
$var wire      1 !    d  $end
$var wire      1 "    out  $end
$var wire      1 #    tmp1  $end
$var wire      1 $    tmp2  $end
$upscope $end


$scope module a7 $end
$var wire      1 !    a  $end
$var wire      1 !    b  $end
$var wire      1 !    c  $end
$var wire      1 !    d  $end
$var wire      1 "    out  $end
$var wire      1 #    tmp1  $end
$var wire      1 $    tmp2  $end
$upscope $end

$upscope $end


$scope module Round_Robin_FIFO_Arbiter_t $end
$var reg       1 %    clk  $end
$var reg       1 &    rst_n  $end
$var reg       4 '    wen [3:0] $end
$var reg       8 (    a [7:0] $end
$var reg       8 )    b [7:0] $end
$var reg       8 *    c [7:0] $end
$var reg       8 +    d [7:0] $end
$var wire      8 ,    dout [7:0] $end
$var wire      1 -    valid  $end
$var wire      3 .    counter [2:0] $end
$var wire      8 /    not_found [7:0] $end
$var parameter 32 0    cyc  $end

$scope module rrfa $end
$var wire      1 1    clk  $end
$var wire      1 2    rst_n  $end
$var wire      1 3    wen [3] $end
$var wire      1 4    wen [2] $end
$var wire      1 5    wen [1] $end
$var wire      1 6    wen [0] $end
$var wire      8 7    a [7:0] $end
$var wire      8 8    b [7:0] $end
$var wire      8 9    c [7:0] $end
$var wire      8 :    d [7:0] $end
$var wire      8 ,    dout [7:0] $end
$var reg       1 ;    valid  $end
$var reg       3 <    counter [2:0] $end
$var wire      1 =    era  $end
$var wire      1 >    erb  $end
$var wire      1 ?    erc  $end
$var wire      1 @    erd  $end
$var wire      2 A    next_counter [1:0] $end
$var wire      8 B    Aout [7:0] $end
$var wire      8 C    Bout [7:0] $end
$var wire      8 D    Cout [7:0] $end
$var wire      8 E    Dout [7:0] $end
$var wire      1 F    ra  $end
$var wire      1 G    rb  $end
$var wire      1 H    rc  $end
$var wire      1 I    rd  $end

$scope module fa $end
$var wire      1 1    clk  $end
$var wire      1 2    rst_n  $end
$var wire      1 6    wen  $end
$var wire      1 F    ren  $end
$var wire      8 7    din [7:0] $end
$var reg       8 J    dout [7:0] $end
$var reg       1 K    error  $end
$var reg       4 L    head [3:0] $end
$var reg       4 M    tail [3:0] $end
$var reg       4 N    next_head [3:0] $end
$var reg       4 O    next_tail [3:0] $end
$upscope $end


$scope module fb $end
$var wire      1 1    clk  $end
$var wire      1 2    rst_n  $end
$var wire      1 5    wen  $end
$var wire      1 G    ren  $end
$var wire      8 8    din [7:0] $end
$var reg       8 P    dout [7:0] $end
$var reg       1 Q    error  $end
$var reg       4 R    head [3:0] $end
$var reg       4 S    tail [3:0] $end
$var reg       4 T    next_head [3:0] $end
$var reg       4 U    next_tail [3:0] $end
$upscope $end


$scope module fc $end
$var wire      1 1    clk  $end
$var wire      1 2    rst_n  $end
$var wire      1 4    wen  $end
$var wire      1 H    ren  $end
$var wire      8 9    din [7:0] $end
$var reg       8 V    dout [7:0] $end
$var reg       1 W    error  $end
$var reg       4 X    head [3:0] $end
$var reg       4 Y    tail [3:0] $end
$var reg       4 Z    next_head [3:0] $end
$var reg       4 [    next_tail [3:0] $end
$upscope $end


$scope module fd $end
$var wire      1 1    clk  $end
$var wire      1 2    rst_n  $end
$var wire      1 3    wen  $end
$var wire      1 I    ren  $end
$var wire      8 :    din [7:0] $end
$var reg       8 \    dout [7:0] $end
$var reg       1 ]    error  $end
$var reg       4 ^    head [3:0] $end
$var reg       4 _    tail [3:0] $end
$var reg       4 `    next_head [3:0] $end
$var reg       4 a    next_tail [3:0] $end
$upscope $end

$upscope $end

$upscope $end

$enddefinitions $end
$dumpvars
b1010 0
z!
x"
x#
x$
0%
0&
b0 '
b0 (
b0 )
b0 *
b0 +
bx ,
x-
bx .
bz /
01
02
03
04
05
06
b0 7
b0 8
b0 9
b0 :
x;
bx <
x=
x>
x?
x@
bx A
bx B
bx C
bx D
bx E
0F
0G
0H
0I
bx J
xK
bx L
bx M
bx N
bx O
bx P
xQ
bx R
bx S
bx T
bx U
bx V
xW
bx X
bx Y
bx Z
bx [
bx \
x]
bx ^
bx _
bx `
bx a
$end
#5000
1%
11
b0 ^
b0 _
b0 \
0]
x]
bx ^
bx _
b0 X
b0 Y
b0 V
0W
xW
bx X
bx Y
b0 R
b0 S
b0 P
0Q
xQ
bx R
bx S
b0 L
b0 M
b0 J
0K
xK
bx L
bx M
b0 <
0;
b1 A
0-
b0 .
b0 B
b0 C
b0 D
b0 E
xF
b0 ,
#10000
0%
1&
b1111 '
b1010111 (
b111000 )
b1001 *
b1100 +
b1100 :
b1001 9
b111000 8
b1010111 7
13
14
15
16
12
01
#15000
1%
11
1]
1W
1Q
1K
b1 <
b10 A
b1 .
1=
1>
1?
1@
0F
xG
#20000
0%
b1000 '
bz (
bz )
bz *
b1010101 +
b1010101 :
bz 9
bz 8
bz 7
04
05
06
01
#25000
1%
11
b10 <
b11 A
b10 .
0G
xH
#30000
0%
b100 '
b10001011 *
bz +
bz :
b10001011 9
03
14
01
#35000
1%
11
b11 <
b0 A
b11 .
0H
xI
#40000
0%
b0 '
bz *
bz 9
04
01
#45000
1%
11
b0 <
b1 A
b0 .
xF
0I
#50000
0%
01
#55000
1%
11
b1 <
b10 A
b1 .
0F
xG
#60000
0%
01
#65000
1%
11
b10 <
b11 A
b10 .
0G
xH
#70000
0%
b1 '
b110011 (
b110011 7
16
01
#75000
1%
11
b11 <
b0 A
b11 .
0H
xI
#80000
0%
b0 '
bz (
bz 7
06
01
#85000
1%
11
b0 <
b1 A
b0 .
xF
0I
#90000
0%
01
#95000
1%
11
b1 <
b10 A
b1 .
0F
xG
#100000
0%
